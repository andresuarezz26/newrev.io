# Dockerfile.worker

# Stage 1: Base image and system dependencies setup (remains the same)
FROM python:3.10-slim AS base

# Install core system dependencies required by Aider and for building Python packages
RUN apt-get update && \
    apt-get install --no-install-recommends -y build-essential git libportaudio2 pandoc && \
    rm -rf /var/lib/apt/lists/*

# Create a non-root user for security best practices
RUN useradd -m -u 1000 -s /bin/bash appuser

# Set the working directory inside the container
WORKDIR /app

# Create a Python virtual environment to manage dependencies cleanly
RUN python -m venv /venv
ENV PATH="/venv/bin:$PATH"

# Playwright browser settings
ENV PLAYWRIGHT_BROWSERS_PATH=/home/appuser/pw-browsers
ENV PLAYWRIGHT_SKIP_BROWSER_GC=1

# Create necessary directories and set proper ownership/permissions for the 'appuser'
RUN mkdir -p /home/appuser/.aider /home/appuser/.cache /home/appuser/pw-browsers && \
    chown -R appuser:appuser /home/appuser /app /venv && \
    chmod -R 777 /home/appuser/.aider /home/appuser/.cache /home/appuser/pw-browsers

# Configure Git to avoid permission complaints
RUN git config --system --add safe.directory /app

# Set the HOME environment variable within the container to /app
ENV HOME=/app

#########################
# Stage 2: Build the Aider Worker specific image
FROM base AS aider-worker

# IMPORTANT CHANGE: Copy your cloned Aider source code into the container.
# This COPY command needs to be relative to the DOCKER BUILD CONTEXT (which we'll set to `your_project_root/`).
# So, it copies `your_project_root/my_aider_fork` into `/tmp/my_aider_fork` INSIDE the container.
COPY my_aider_fork /tmp/my_aider_fork

# Copy your specific worker code and its requirements file into the container's /app directory.
COPY aider_worker/aider_worker_backend.py /app/aider_worker_backend.py
COPY aider_worker/requirements.txt /app/requirements.txt

# ... (previous lines, up to and including 'COPY aider_worker/requirements.txt /app/requirements.txt') ...

# --- START DEBUGGING SPLIT ---
# Step 1: Upgrade pip (always good practice)
RUN /venv/bin/python -m pip install --upgrade --no-cache-dir pip

# Step 2: Install your forked Aider project in "editable" mode
# This command will fail if Aider's setup.py has issues, or if one of its dependencies is missing
RUN /venv/bin/python -m pip install --no-cache-dir -e /tmp/my_aider_fork[playwright]

# Step 3: Install dependencies from your worker's own `requirements.txt`
# This command will fail if there's an issue with one of your worker's direct dependencies
RUN /venv/bin/python -m pip install --no-cache-dir -r /app/requirements.txt

# Step 4: Install Playwright browsers (a runtime dependency for Aider's browser features)
# This command will fail if Playwright cannot download necessary browser binaries or has other runtime issues
RUN /venv/bin/python -m playwright install --with-deps chromium
# --- END DEBUGGING SPLIT ---

# Fix permissions on installed site-packages directories
RUN find /venv/lib/python3.10/site-packages \( -type d -exec chmod a+rwx {} + \) -o \( -type f -exec chmod a+rw {} + \)

# Switch to the non-root user for security
USER appuser

# Define the command to run your Aider worker backend script
CMD ["/venv/bin/python", "/app/aider_worker_backend.py"]